# Segment Tree  线段树(也叫Interval Tree 区间树)
# 使用区间树处理 有些问题关注的是一个线段或者说是一个区间
# 如 区间染色的问题：
#       染色操作(更新区间)
#       查询操作(查询区间)
# 实质基于区间的统计查询
# 以求和为例

#                           A[0..7]
#                     /               \
#                   /                  \
#               A[0..3]                A[4..7]
#           /         \               /       \
#         A[0..1]      A[2..3]      A[4..5]    A[6..7]
#       /    \       /    \        /    \      /    \
#   A[0]    A[1]   A[2]   A[3]   A[4]   A[5] A[6]   A[7]

# 线段树是一棵平衡二叉树(所用叶子节点相距不超过三层)

# 如果节点数不是2^n 如下有7个节点，则向右子树分 左3右4，叶子节点都在最后两层中
# h=0                          A[0..6]
#                        /               \
#                      /                  \
# h=1              A[0..2]                A[3..6]
#                 /       \               /       \
# h=2          A[0]      A[1..2]       A[3..4]    A[5..6]
#                        /    \        /    \      /    \
# h=3                 A[1]   A[2]   A[3]   A[4] A[5]   A[6]

# 我们将线段树以数组的形式储存
# 此时需要构建一个满二叉树，最后一层没有节点的位置补为空

# 假如一个区间内有n个元素
#       最好情况：n 是 2 ^ k 也就是 n为2的整数倍如8
#                 此时 需要 2n 个空间也就是16个空间
#       最坏情况：n 是 2 ^ k + 1 也就是 n如9
#                 此时 需要多加一层 也就是 4n ，32个空间
#                 这里的 n 也不是元素个数，是倒数第二层的元素个数 2 ^ (h-1)
#       所以我们只需要开 4n 的静态空间即可

# 更深层次的有
#       二维线段树
#       动态线段树

#       树状数组(Binary Index Tree)