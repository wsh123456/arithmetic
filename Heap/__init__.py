# 使用堆这种数据结构从底层实现优先队列
# 优先队列，即在出队的时候对优先级高的数据先出队
# 1.二叉堆，是一颗完全二叉树
#                62
#             /      \
#           41       30
#         /   \     /  \
#        28   16   22  13
#       / \   /
#     19  17 15

# 如上就是一个完全二叉树(非满二叉树)，可直观的理解为，缺失的节点都在右下方
# 构成方法就是把元素顺序排列成树的形状

# 如上，所有的节点的值都大于等于其孩子节点的值，即为一个最大堆(反之则为最小堆)
# 由于可以顺序排列，可以使用动态数组来实现堆
#                        62(1)
#                  /             \
#               41(2)            30(3)
#           /         \         /    \
#         28(4)       16(5)   22(6)  13(7)
#       /    \        /
#     19(8)  17(9) 15(10)

# 用列表表示为
#  0   1   2   3   4   5   6   7   8   9   10
# [-, 62, 41, 30, 28, 16, 22, 13, 19, 17, 15]

# 对于某个节点i
# 其父亲节点 parent(i) = i/2   (对i/2取整)
# 其左孩子   leftchild(i) = i*2
# 其右孩子   rightchild(i) = i*2 + 1

# 若不将列表0的位置空出来也可以
#   0   1   2   3   4   5   6   7   8   9
# [62, 41, 30, 28, 16, 22, 13, 19, 17, 15]
# 其父亲节点 parent(i) = (i-1)/2   (对(i-1)/2取整)
# 其左孩子   leftchild(i) = i*2 + 1
# 其右孩子   rightchild(i) = i*2 + 2











